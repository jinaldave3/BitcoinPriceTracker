'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.useDebouncedEffect = useDebouncedEffect;

var _react = require('react');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var DEFAULT_CONFIG = {
  timeout: 0,
  ignoreInitialCall: true
};
function useDebouncedEffect(callback, config) {
  var deps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var currentConfig = void 0;
  if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
    currentConfig = _extends({}, DEFAULT_CONFIG, config);
  } else {
    currentConfig = _extends({}, DEFAULT_CONFIG, {
      timeout: config
    });
  }
  var _currentConfig = currentConfig,
      timeout = _currentConfig.timeout,
      ignoreInitialCall = _currentConfig.ignoreInitialCall;

  var data = (0, _react.useRef)({ firstTime: true });
  (0, _react.useEffect)(function () {
    var _data$current = data.current,
        firstTime = _data$current.firstTime,
        clearFunc = _data$current.clearFunc;


    if (firstTime && ignoreInitialCall) {
      data.current.firstTime = false;
      return;
    }

    var handler = setTimeout(function () {
      if (clearFunc && typeof clearFunc === 'function') {
        clearFunc();
      }
      data.current.clearFunc = callback();
    }, timeout);

    return function () {
      clearTimeout(handler);
    };
  }, [timeout].concat(_toConsumableArray(deps)));
}

exports.default = useDebouncedEffect;